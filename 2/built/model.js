// total cycles: 2771 (0.043ms at 64MHz)
const modelFromWeights = 
((weights, mkRuntime) => {
    "use strict";
    const weightOff = 40
    const dataOff = 0
    const mem = new Float32Array(weightOff + 451)
    mem.fill(1000.2342)
    new Uint8Array(mem.buffer).set(weights, weightOff << 2)
    const memU32 = new Uint32Array(mem.buffer)
    const rt = mkRuntime(mem)
    const { softmax, f32 } = rt
    return (inputs => {
        if (inputs.length != 24)
            throw new Error("invalid input size; expected 24, got " + inputs.length)
        mem.set(inputs, dataOff)
        let input, output, kernel
        let tmp0, tmp1, tmp2, tmp3, tmp4, tmp5
        let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26, s27, s28, s29, s30, s31

// label: begin_0
// Layer: InputLayer; data: [24]@0 => [24]@0
// label: end_0
// label: begin_1
// Layer: Dense; data: [24]@0 => [16]@24
// 1878 cycles (10.0% opt)
kernel = weightOff + 0
output = dataOff + 24
for (let idx0 = 0; idx0 < 16; idx0++) {
  s0 = mem[kernel++]
  input = dataOff + 0
  s1 = mem[input++]
  s2 = mem[input++]
  s3 = mem[input++]
  s4 = mem[input++]
  s5 = mem[input++]
  s6 = mem[input++]
  s7 = mem[input++]
  s8 = mem[input++]
  s9 = mem[input++]
  s10 = mem[input++]
  s11 = mem[input++]
  s12 = mem[input++]
  s13 = mem[input++]
  s14 = mem[input++]
  s15 = mem[kernel++]
  s16 = mem[kernel++]
  s17 = mem[kernel++]
  s18 = mem[kernel++]
  s19 = mem[kernel++]
  s20 = mem[kernel++]
  s21 = mem[kernel++]
  s22 = mem[kernel++]
  s23 = mem[kernel++]
  s24 = mem[kernel++]
  s25 = mem[kernel++]
  s26 = mem[kernel++]
  s27 = mem[kernel++]
  s28 = mem[kernel++]
  s1 = f32(s1 * s15)
  s2 = f32(s2 * s16)
  s0 = f32(s0 + s1)
  s3 = f32(s3 * s17)
  s0 = f32(s0 + s2)
  s4 = f32(s4 * s18)
  s0 = f32(s0 + s3)
  s5 = f32(s5 * s19)
  s0 = f32(s0 + s4)
  s6 = f32(s6 * s20)
  s0 = f32(s0 + s5)
  s7 = f32(s7 * s21)
  s0 = f32(s0 + s6)
  s8 = f32(s8 * s22)
  s0 = f32(s0 + s7)
  s9 = f32(s9 * s23)
  s0 = f32(s0 + s8)
  s10 = f32(s10 * s24)
  s0 = f32(s0 + s9)
  s11 = f32(s11 * s25)
  s0 = f32(s0 + s10)
  s12 = f32(s12 * s26)
  s0 = f32(s0 + s11)
  s13 = f32(s13 * s27)
  s0 = f32(s0 + s12)
  s14 = f32(s14 * s28)
  s0 = f32(s0 + s13)
  s0 = f32(s0 + s14)
  s1 = mem[input++]
  s2 = mem[input++]
  s3 = mem[input++]
  s4 = mem[input++]
  s5 = mem[input++]
  s6 = mem[input++]
  s7 = mem[input++]
  s8 = mem[input++]
  s9 = mem[input++]
  s10 = mem[input++]
  s15 = mem[kernel++]
  s16 = mem[kernel++]
  s17 = mem[kernel++]
  s18 = mem[kernel++]
  s19 = mem[kernel++]
  s20 = mem[kernel++]
  s21 = mem[kernel++]
  s22 = mem[kernel++]
  s23 = mem[kernel++]
  s24 = mem[kernel++]
  s1 = f32(s1 * s15)
  s2 = f32(s2 * s16)
  s0 = f32(s0 + s1)
  s3 = f32(s3 * s17)
  s0 = f32(s0 + s2)
  s4 = f32(s4 * s18)
  s0 = f32(s0 + s3)
  s5 = f32(s5 * s19)
  s0 = f32(s0 + s4)
  s6 = f32(s6 * s20)
  s0 = f32(s0 + s5)
  s7 = f32(s7 * s21)
  s0 = f32(s0 + s6)
  s8 = f32(s8 * s22)
  s0 = f32(s0 + s7)
  s9 = f32(s9 * s23)
  s0 = f32(s0 + s8)
  s10 = f32(s10 * s24)
  s0 = f32(s0 + s9)
  s0 = f32(s0 + s10)
  mem[output++] = s0
}
output = dataOff + 24
if (mem[output] < 0) mem[output] = 0; output++
if (mem[output] < 0) mem[output] = 0; output++
if (mem[output] < 0) mem[output] = 0; output++
if (mem[output] < 0) mem[output] = 0; output++
if (mem[output] < 0) mem[output] = 0; output++
if (mem[output] < 0) mem[output] = 0; output++
if (mem[output] < 0) mem[output] = 0; output++
if (mem[output] < 0) mem[output] = 0; output++
if (mem[output] < 0) mem[output] = 0; output++
if (mem[output] < 0) mem[output] = 0; output++
if (mem[output] < 0) mem[output] = 0; output++
if (mem[output] < 0) mem[output] = 0; output++
if (mem[output] < 0) mem[output] = 0; output++
if (mem[output] < 0) mem[output] = 0; output++
if (mem[output] < 0) mem[output] = 0; output++
if (mem[output] < 0) mem[output] = 0; output++
// label: end_1
// label: begin_2
// Layer: Dense; data: [16]@24 => [3]@0
// 893 cycles (2.9% opt)
kernel = weightOff + 400
output = dataOff + 0
for (let idx3 = 0; idx3 < 3; idx3++) {
  s0 = mem[kernel++]
  input = dataOff + 24
  s1 = mem[input++]
  s2 = mem[input++]
  s3 = mem[input++]
  s4 = mem[input++]
  s5 = mem[input++]
  s6 = mem[input++]
  s7 = mem[input++]
  s8 = mem[input++]
  s9 = mem[input++]
  s10 = mem[input++]
  s11 = mem[input++]
  s12 = mem[input++]
  s13 = mem[input++]
  s14 = mem[input++]
  s15 = mem[kernel++]
  s16 = mem[kernel++]
  s17 = mem[kernel++]
  s18 = mem[kernel++]
  s19 = mem[kernel++]
  s20 = mem[kernel++]
  s21 = mem[kernel++]
  s22 = mem[kernel++]
  s23 = mem[kernel++]
  s24 = mem[kernel++]
  s25 = mem[kernel++]
  s26 = mem[kernel++]
  s27 = mem[kernel++]
  s28 = mem[kernel++]
  s1 = f32(s1 * s15)
  s2 = f32(s2 * s16)
  s0 = f32(s0 + s1)
  s3 = f32(s3 * s17)
  s0 = f32(s0 + s2)
  s4 = f32(s4 * s18)
  s0 = f32(s0 + s3)
  s5 = f32(s5 * s19)
  s0 = f32(s0 + s4)
  s6 = f32(s6 * s20)
  s0 = f32(s0 + s5)
  s7 = f32(s7 * s21)
  s0 = f32(s0 + s6)
  s8 = f32(s8 * s22)
  s0 = f32(s0 + s7)
  s9 = f32(s9 * s23)
  s0 = f32(s0 + s8)
  s10 = f32(s10 * s24)
  s0 = f32(s0 + s9)
  s11 = f32(s11 * s25)
  s0 = f32(s0 + s10)
  s12 = f32(s12 * s26)
  s0 = f32(s0 + s11)
  s13 = f32(s13 * s27)
  s0 = f32(s0 + s12)
  s14 = f32(s14 * s28)
  s0 = f32(s0 + s13)
  s0 = f32(s0 + s14)
  s1 = mem[input++]
  s2 = mem[input++]
  s15 = mem[kernel++]
  s16 = mem[kernel++]
  s1 = f32(s1 * s15)
  s2 = f32(s2 * s16)
  s0 = f32(s0 + s1)
  s0 = f32(s0 + s2)
  mem[output++] = s0
}
output = dataOff + 0
softmax(output, 3)
// label: end_2

        
        return mem.slice(0, 3)
    })
})
;
const weights = new Uint8Array(new Uint32Array([0,3190382178,3141596400,3159754262,1041743485,1025035037,3189289717,1048872607,3179778267,3190355402,1051836669,3180696267,3179108265,989752387,1041277231,3183494507,1042951357,1033929950,3169426938,1046325951,3149918589,3192914650,3195260746,3177613296,3157347777,0,3190239301,3182433991,1023623005,3186447394,3195516292,3186127520,1034490345,1052413075,3197892968,3198776810,1047883082,3182574246,1027885685,1044817815,3162984070,3152556687,1046344835,3188676139,1040465078,3121248106,1025616515,1048947689,3167293748,3198591404,3172263889,1050555632,3193541157,3190857754,3197262720,3187797465,1048809177,3178133817,1050121752,3188407939,3183435137,3195400875,3197496667,1019394890,1015237573,3174399143,1040068550,3207686987,3226199196,3200689851,1049688854,1052831601,3200224609,3184062531,3193767395,3180623633,1027766881,3188837658,1039627469,1048632012,3190514160,1041404163,3191242356,3187820654,1035694860,3178492654,1051207954,3195811396,1027012712,3167957001,3195843018,3192019391,3214622566,3235140559,3201346671,3191891189,3189800508,1020364052,1036260876,1030983964,0,1031466530,3190408453,1031650562,3184583060,1050182594,983368837,3189112747,3189704237,1052360729,1040689686,3189251439,1022996077,1027408104,1043867796,3201277866,3181971760,1049208914,3186986634,1048875916,3187279634,1033300299,3194122835,3188607912,3200051270,0,1053854488,1043124283,1053046776,1032032257,3196560484,1049593618,1047511973,1041076106,1046150408,1044741880,1046572572,3173589716,1044023193,3174651324,3175921203,1006697227,3165719623,3172759001,3188236187,3170912730,3176583360,1053170599,1047365165,3202215236,0,3181629528,1054532783,3196720943,3188207214,1023779973,1052763492,3198516289,3189651363,1050623983,3190420412,3172452541,3170501919,3175552002,3180307235,1050213209,1026550938,3182820084,3197384788,1029613404,1037978431,3189244417,1045843943,3192254547,3197226614,0,1044643094,1033380637,1045259750,1041820210,3152831979,1044227789,3150976548,1049623231,1051777012,3194909768,1038284381,3191152510,3177157458,3196263026,3187165168,3185391345,3185837407,3197606883,3179714685,1039007044,1044858645,1031947743,1025915039,1041309742,0,1042018011,3200254900,3175186924,3192849019,1024275403,3194208015,3176539863,1042647966,1027075624,3182681951,3192218006,3201557988,1044668882,3199877136,3183956513,1041134148,1036194946,3191648770,3171047892,3186835171,1052714665,3180215962,1039451190,1019809933,1024411704,1049735287,1032151022,1040669975,3193668829,1046902866,1032048882,1025401769,1043522820,1037763612,3193967132,3199043726,3196450426,1009757733,3197387857,3189638272,1047645400,1065804007,1080360158,3184139738,3179274791,3172960097,3189682038,1016769810,3192870648,0,3194815305,3190000030,3173146397,1024485060,1051743173,3195079926,3190856789,985401136,1051181342,3191599916,3188555246,1041867754,1034806914,3189126710,3187494261,1009026187,3171643088,3183272243,1041280118,3185295863,3185967011,1023750893,1041078880,1042634104,0,1026233910,1049709507,1032484250,1008646757,3192941026,1039813613,3176866212,3193023214,3196928704,3186368870,1048879304,3199436821,3196750395,999136071,1040429602,3200704673,3195261558,1016794370,3196066379,1042305970,3191640964,3170081016,1048930852,1027035750,1022848046,1025112308,3188038311,3191208097,3176337895,3198303603,1011424546,3196100097,3163021358,3191754106,1040263543,1023279425,3191566898,3194839647,1043303086,1036361836,1037421084,1056012172,1077318626,3177819281,3189517013,3189813311,1041065612,1042761141,3184816997,0,3171111765,1043788325,3184136797,3174349559,1052111488,1045467319,1053550690,1048672386,3187822735,1050887003,1044934499,1023512563,3159717581,1048908755,1052523111,1032038830,1025891393,3186435549,3166850507,3189434005,3157819257,1049298037,3200311875,1031350130,3167652737,3196309380,3193609675,1039036712,1019374962,3187733765,1042902479,3179366255,3198727686,3193976017,3181633386,1047399012,3164155238,1041801135,3183320939,3173719830,3187420561,3206691061,3221662516,1039831552,1048802761,1054722562,3193729130,1045215155,1038861158,1019931102,1039576923,1049083407,1024969561,1007199038,1033505917,3165097926,1047190054,1008998842,3189344876,3177754504,1052704796,3181912181,3200937127,3190403091,3200417424,3190091392,1059408402,1075232500,3200402224,1036110961,3162281051,3167335727,3174632722,3192288375,3182003898,1049757756,1058172539,3217376035,3207137627,1052690014,1052530134,3199980285,1034950009,1059241369,3228209274,1043975239,1045112468,1037002198,1023559506,3215761502,3208157680,1034533786,3202801690,3180711412,1065585574,1057975726,3196461096,1036104203,3206629031,1036208804,1043185282,1079004029,1026187300,1050781766,1061861958,1048793798,1068991045,1062282855,3100868344,3196064502,1051105855,3196751303,3191166911,1041190469,3194836851,1026211128,3174288125,1058403995,3184539698,1019271064,3203230116,1022005871,1042285993,3199790238,1049279319]).buffer);
const modelFromRuntime = mkR => modelFromWeights(weights, mkR);
return { weights, modelFromRuntime, modelFromWeights, inputSize: 24 };
