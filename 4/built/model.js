// total cycles: 2771 (0.043ms at 64MHz)
const modelFromWeights = 
((weights, mkRuntime) => {
    "use strict";
    const weightOff = 40
    const dataOff = 0
    const mem = new Float32Array(weightOff + 451)
    mem.fill(1000.2342)
    new Uint8Array(mem.buffer).set(weights, weightOff << 2)
    const memU32 = new Uint32Array(mem.buffer)
    const rt = mkRuntime(mem)
    const { softmax, f32 } = rt
    return (inputs => {
        if (inputs.length != 24)
            throw new Error("invalid input size; expected 24, got " + inputs.length)
        mem.set(inputs, dataOff)
        let input, output, kernel
        let tmp0, tmp1, tmp2, tmp3, tmp4, tmp5
        let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26, s27, s28, s29, s30, s31

// label: begin_0
// Layer: InputLayer; data: [24]@0 => [24]@0
// label: end_0
// label: begin_1
// Layer: Dense; data: [24]@0 => [16]@24
// 1878 cycles (10.0% opt)
kernel = weightOff + 0
output = dataOff + 24
for (let idx0 = 0; idx0 < 16; idx0++) {
  s0 = mem[kernel++]
  input = dataOff + 0
  s1 = mem[input++]
  s2 = mem[input++]
  s3 = mem[input++]
  s4 = mem[input++]
  s5 = mem[input++]
  s6 = mem[input++]
  s7 = mem[input++]
  s8 = mem[input++]
  s9 = mem[input++]
  s10 = mem[input++]
  s11 = mem[input++]
  s12 = mem[input++]
  s13 = mem[input++]
  s14 = mem[input++]
  s15 = mem[kernel++]
  s16 = mem[kernel++]
  s17 = mem[kernel++]
  s18 = mem[kernel++]
  s19 = mem[kernel++]
  s20 = mem[kernel++]
  s21 = mem[kernel++]
  s22 = mem[kernel++]
  s23 = mem[kernel++]
  s24 = mem[kernel++]
  s25 = mem[kernel++]
  s26 = mem[kernel++]
  s27 = mem[kernel++]
  s28 = mem[kernel++]
  s1 = f32(s1 * s15)
  s2 = f32(s2 * s16)
  s0 = f32(s0 + s1)
  s3 = f32(s3 * s17)
  s0 = f32(s0 + s2)
  s4 = f32(s4 * s18)
  s0 = f32(s0 + s3)
  s5 = f32(s5 * s19)
  s0 = f32(s0 + s4)
  s6 = f32(s6 * s20)
  s0 = f32(s0 + s5)
  s7 = f32(s7 * s21)
  s0 = f32(s0 + s6)
  s8 = f32(s8 * s22)
  s0 = f32(s0 + s7)
  s9 = f32(s9 * s23)
  s0 = f32(s0 + s8)
  s10 = f32(s10 * s24)
  s0 = f32(s0 + s9)
  s11 = f32(s11 * s25)
  s0 = f32(s0 + s10)
  s12 = f32(s12 * s26)
  s0 = f32(s0 + s11)
  s13 = f32(s13 * s27)
  s0 = f32(s0 + s12)
  s14 = f32(s14 * s28)
  s0 = f32(s0 + s13)
  s0 = f32(s0 + s14)
  s1 = mem[input++]
  s2 = mem[input++]
  s3 = mem[input++]
  s4 = mem[input++]
  s5 = mem[input++]
  s6 = mem[input++]
  s7 = mem[input++]
  s8 = mem[input++]
  s9 = mem[input++]
  s10 = mem[input++]
  s15 = mem[kernel++]
  s16 = mem[kernel++]
  s17 = mem[kernel++]
  s18 = mem[kernel++]
  s19 = mem[kernel++]
  s20 = mem[kernel++]
  s21 = mem[kernel++]
  s22 = mem[kernel++]
  s23 = mem[kernel++]
  s24 = mem[kernel++]
  s1 = f32(s1 * s15)
  s2 = f32(s2 * s16)
  s0 = f32(s0 + s1)
  s3 = f32(s3 * s17)
  s0 = f32(s0 + s2)
  s4 = f32(s4 * s18)
  s0 = f32(s0 + s3)
  s5 = f32(s5 * s19)
  s0 = f32(s0 + s4)
  s6 = f32(s6 * s20)
  s0 = f32(s0 + s5)
  s7 = f32(s7 * s21)
  s0 = f32(s0 + s6)
  s8 = f32(s8 * s22)
  s0 = f32(s0 + s7)
  s9 = f32(s9 * s23)
  s0 = f32(s0 + s8)
  s10 = f32(s10 * s24)
  s0 = f32(s0 + s9)
  s0 = f32(s0 + s10)
  mem[output++] = s0
}
output = dataOff + 24
if (mem[output] < 0) mem[output] = 0; output++
if (mem[output] < 0) mem[output] = 0; output++
if (mem[output] < 0) mem[output] = 0; output++
if (mem[output] < 0) mem[output] = 0; output++
if (mem[output] < 0) mem[output] = 0; output++
if (mem[output] < 0) mem[output] = 0; output++
if (mem[output] < 0) mem[output] = 0; output++
if (mem[output] < 0) mem[output] = 0; output++
if (mem[output] < 0) mem[output] = 0; output++
if (mem[output] < 0) mem[output] = 0; output++
if (mem[output] < 0) mem[output] = 0; output++
if (mem[output] < 0) mem[output] = 0; output++
if (mem[output] < 0) mem[output] = 0; output++
if (mem[output] < 0) mem[output] = 0; output++
if (mem[output] < 0) mem[output] = 0; output++
if (mem[output] < 0) mem[output] = 0; output++
// label: end_1
// label: begin_2
// Layer: Dense; data: [16]@24 => [3]@0
// 893 cycles (2.9% opt)
kernel = weightOff + 400
output = dataOff + 0
for (let idx3 = 0; idx3 < 3; idx3++) {
  s0 = mem[kernel++]
  input = dataOff + 24
  s1 = mem[input++]
  s2 = mem[input++]
  s3 = mem[input++]
  s4 = mem[input++]
  s5 = mem[input++]
  s6 = mem[input++]
  s7 = mem[input++]
  s8 = mem[input++]
  s9 = mem[input++]
  s10 = mem[input++]
  s11 = mem[input++]
  s12 = mem[input++]
  s13 = mem[input++]
  s14 = mem[input++]
  s15 = mem[kernel++]
  s16 = mem[kernel++]
  s17 = mem[kernel++]
  s18 = mem[kernel++]
  s19 = mem[kernel++]
  s20 = mem[kernel++]
  s21 = mem[kernel++]
  s22 = mem[kernel++]
  s23 = mem[kernel++]
  s24 = mem[kernel++]
  s25 = mem[kernel++]
  s26 = mem[kernel++]
  s27 = mem[kernel++]
  s28 = mem[kernel++]
  s1 = f32(s1 * s15)
  s2 = f32(s2 * s16)
  s0 = f32(s0 + s1)
  s3 = f32(s3 * s17)
  s0 = f32(s0 + s2)
  s4 = f32(s4 * s18)
  s0 = f32(s0 + s3)
  s5 = f32(s5 * s19)
  s0 = f32(s0 + s4)
  s6 = f32(s6 * s20)
  s0 = f32(s0 + s5)
  s7 = f32(s7 * s21)
  s0 = f32(s0 + s6)
  s8 = f32(s8 * s22)
  s0 = f32(s0 + s7)
  s9 = f32(s9 * s23)
  s0 = f32(s0 + s8)
  s10 = f32(s10 * s24)
  s0 = f32(s0 + s9)
  s11 = f32(s11 * s25)
  s0 = f32(s0 + s10)
  s12 = f32(s12 * s26)
  s0 = f32(s0 + s11)
  s13 = f32(s13 * s27)
  s0 = f32(s0 + s12)
  s14 = f32(s14 * s28)
  s0 = f32(s0 + s13)
  s0 = f32(s0 + s14)
  s1 = mem[input++]
  s2 = mem[input++]
  s15 = mem[kernel++]
  s16 = mem[kernel++]
  s1 = f32(s1 * s15)
  s2 = f32(s2 * s16)
  s0 = f32(s0 + s1)
  s0 = f32(s0 + s2)
  mem[output++] = s0
}
output = dataOff + 0
softmax(output, 3)
// label: end_2

        
        return mem.slice(0, 3)
    })
})
;
const weights = new Uint8Array(new Uint32Array([0,1050644935,1041158652,3200941885,1035654085,3200058853,1049731552,3199462379,1047529045,1049324367,3170970246,3196571177,3188190525,1052764170,3173240459,3197136332,3182384086,3163522957,1049191180,1028988117,1054316823,1053630770,1038019307,1042355120,1030295871,0,1049540719,3193387145,3198051584,3159388014,3179934705,1043533470,1024455824,1044072195,3199384084,3202633191,1036665968,1043899693,3195025093,3190332427,1045341480,1047759509,1024660462,1042334871,991132195,1042892632,3197641286,3197561131,1043143077,1041177176,0,3194004605,1045961803,3189672150,3156372096,1045920792,1035203385,1048637671,3182787528,3188180323,1021010594,3173439955,3183057035,3177918725,3187356871,1027623974,1032036050,3195305380,1024054473,3178049907,1042646847,1045049648,1044283447,1051135611,3178765849,0,3163968001,3157372209,1051711992,3190848734,1043691722,3182890146,1042135386,1048886227,3199525815,3178711555,1034839583,3192523078,1041593696,3194772802,3197802579,3176741663,3191306483,1034175902,3190583624,1042656455,1006979940,3192085474,3179415117,1040640228,0,1054417460,1048556866,3189028622,1050609238,1044140269,3200132400,3190150143,1046743545,1038893318,3196824722,1041438119,1048768705,1051950305,3201289707,3197766841,1034075028,1051425852,1042542727,3195511223,1035884319,1043371676,1052318679,3200266710,1041989871,0,3155732970,3176497895,3170547072,1044687978,3177253366,3187599330,3163431843,1032586602,3198308863,3173127985,3174024203,1044386487,3196423882,1048135388,3188545235,3187190089,1025877550,1035748961,3190992867,3180519699,3197818613,1039654670,3182813949,3181060052,0,3193470237,1045565084,3200735884,3174883627,1044098468,3196632877,1052992610,1033844842,1049113112,3197811802,1040546373,3193487766,1031988001,1041065839,1030911610,1006868253,1051559059,1024471473,1036043424,1008582763,3192934133,1044083083,1047747990,3197330684,0,3174395946,3175892553,3187125466,1018238526,1026634492,3149942025,3191941925,3194787270,1039952239,3195980610,1049407813,1053381046,3171374704,3183819370,3180168809,3175172401,1045330475,1040716857,3198827968,3202304595,3169174351,3179011373,1043468147,1037840221,0,1053362481,1054688603,3200469137,3200128730,3196286097,1029109601,1043720336,3178344631,1047728092,1034071488,1035250683,3201631048,1036554565,1043485685,3183695098,3198190182,3196096743,3179476600,3179555554,1037716902,3190386218,3191497269,1039316924,1050629171,0,3195627533,1052559554,3189919873,1043645047,3192475309,1042097500,3200648500,3172177252,1033172044,1031181586,1020131899,1019838906,1038191934,1043895666,1053878279,1034111370,1046834896,1016550636,1042559246,1050659379,1054062611,1045664476,3202260784,1017265346,0,3193794813,1034936288,1020809378,3191721436,3199624222,3196555420,1031339846,1052818282,1047736516,1032007125,3197699284,1045668114,1043789329,1048603827,3188540023,3193437994,3187152846,1043212109,3184747627,1033066068,1045484651,1037496249,1043435739,3176699175,0,1043924341,3178407436,3149705219,1041219290,1030100468,3193350084,1044044227,1042743391,1001589112,3197526116,3195370722,1054080063,3179339144,3196740841,1029905465,1031499751,1046875032,3186841537,3202558392,1038929241,1042751510,1042343711,1044262043,3189251400,0,1043106333,3198630375,1051804353,1025072948,3193608661,1048504737,3191895764,1051056358,3190760920,3195291083,3178598867,1054400461,1008239812,1036335189,1043814923,1044060178,3187338201,1029751678,1050685782,3194994963,3176789373,993188674,1050074945,3183496863,0,1035021155,1050596062,3182007181,1043925629,3186641605,3154850264,3189357870,3172072053,1034622117,3189387848,3195317341,3198538899,1040219610,3189966008,1015787063,1028068262,1040234214,1025593486,3158303608,3195765456,1012984004,3176516132,1024530152,3197885891,0,3190718211,3150720549,3188998864,1026896592,1032663016,3190280983,1044996564,3186554631,1036803034,1049737376,3178164182,3175269602,1033006686,1049610115,3194211016,1050162592,3162685595,3198262060,1041538954,3196440888,1044114539,3196592559,1047803287,3193777095,0,1042970075,1041115650,1045102811,3187400043,3185166510,1024675934,1032935117,1048743898,3202053371,1033254251,3195117382,1032694013,3149949234,3196238457,3180849288,1036149253,3194631127,1034458551,1052593122,1035928406,3182357002,3181216119,3184667303,1048327043,0,1052631164,1048382520,3189286173,1052928890,3202181296,3197982898,3191461745,3190412922,1029561276,1020745540,1037022839,3191630433,1035405903,3179925054,1055072113,3194662749,0,3197590785,3196901092,3190915669,1054928961,1048511385,3184473944,1040572960,3192166927,3188469913,1041298737,3147785743,3200121266,3203012133,3206122304,3187923689,3172786379,0,1058384375,1053716738,1051595721,3191683480,1052267514,1047650936,3192334549,1040983051,3190889369,3204391494,1040799820,3188604725,3184012186,1044748825,3198983209,1049619374]).buffer);
const modelFromRuntime = mkR => modelFromWeights(weights, mkR);
return { weights, modelFromRuntime, modelFromWeights, inputSize: 24 };
